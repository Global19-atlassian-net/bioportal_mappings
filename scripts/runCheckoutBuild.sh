#!/bin/bash

# This script is designed for a production run of LOOM.  It can copied and run
# anywhere on a *nix system.  It should checkout the LOOM code from git, build
# it with maven, then run the LOOM java process.
#
# There are many places where the entire process can fail, including the git
# authentication, the maven build, the java process (including SPARQL database
# connections and term processing), and the associated shell scripting.

# ONLY EDIT THIS SCRIPT FROM WITHIN THE git REPOSITORY!  WHEREVER THIS SCRIPT
# RUNS, IT WILL REPLACE ITSELF WITH A COPY FROM THE GIT CHECKOUT.  THE PURPOSE
# OF THIS CRAZY LOGIC IS TO FOCUS MAINTENANCE OF THIS SCRIPT IN GIT.

# This script can be used in the entire mapping process, see
# runAllMappings.sh for details.
#
##############################################################################


# Keep track of the current working directory.
CWD=$(pwd)

projectName="bioportal_mapping"
gitRepo="XXXX"

# -----------------------------------------------------------------------
# Checkout the git project
cd $CWD
rm -rf $projectName
rm -rf $projectName # sometimes one is just not enough!
git clone $gitRepo $projectName
if [ $? -ne 0 ]; then
    echo "$(date): ERROR: git-clone failed." >&2
    exit 1
fi

# -----------------------------------------------------------------------
# Keep these scripts updated from the last git checkout.
cp -p $CWD/$projectName/scripts/runCheckoutBuild.sh .
cp -p $CWD/$projectName/README.txt .


# -----------------------------------------------------------------------
# Modify the MySQL connection profile for the host domain
props=${projectName}/src/main/resources/mapping.properties
domain=$(hostname -d)
if [ "$domain" == "stanford.edu" ]; then
    # Comment out all the mysql connection properties
    sed -i -e "/jdbc:mysql/s/\(.*\)/#\1/" $props
    # Uncomment the stanford mysql connection
    sed -i -e "/jdbc:mysql.*${domain}/s/^#*\(.*\)/\1/" $props
fi

# -----------------------------------------------------------------------
# Build the project.
mvn --version
if [ $? -ne 0 ]; then
    echo "$(date): ERROR: maven is required to build $projectName."
    exit 1
fi
cd $CWD/$projectName
mvn clean install
if [ $? -ne 0 ]; then
    echo "$(date): ERROR: maven failed to build $projectName."
    exit 1
fi
cd $CWD

# -----------------------------------------------------------------------
# Update the classpath, using the eclipse project generated by maven.
cd $CWD/$projectName
mvn eclipse:clean eclipse:eclipse
cd $CWD/$projectName/scripts
./javaClasspathFromEclipseProject.sh
cd $CWD

