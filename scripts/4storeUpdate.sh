#!/bin/bash

# Configure defines the 4store server URLs and graph variables.
source 4storeConfigure.sh

echoSeparator () {
    echo >&2
    echo "##########################################################################" >&2
}


# ---------------------------------------------------------------------------------
# Process input arguments
#

cat <<END > help.txt

Usage: $0 -p {project} -i {mappingInputPattern} [-s <mappingsRemoveSPARQL>]

The -p {project} argument is required.  It's a project identifier for mappings,
such as "loom", "umlsCui", etc.

The {mappingInputPattern} is a prefix to a series of files generated by java
processes, which contain mapping triples in turtle format.  This input argument
is required.  The pattern is expanded to match any files with this pattern:
{mappingInputPattern}_???.ttl

Unless the {mappingsRemoveSPARQL} file is specified explicitly, the
mappingsToRemove.ru file is used. That file is generated automatically from
mappingsToRemoveAsSPARQL.py, which parses mappingsToRemove.sql to generate
SPARQL that will populate a new graph with mapping IDs to be removed. The new
graph is temporarily created at: $tmpBadGraph

That graph contains triples of the form: ?mapID a
<http://purl.bioontology.org/mapping/mappings.rdfs#One_To_One_Mapping>
The ?mapID is used in a DESCRIBE query on the {project} graph to identify all
the triples that contain the ?mapID.  This is done by the SPARQL in
sparql_{project}MappingsToRemove1.rq and sparql_{project}MappingsToRemove2.rq;
then all of those triples are deleted from the {project} graph.

END

#The final result is ntriples in files {mappingInputFile}_OK.nt, where
#{mappingInputFile} is any file that matches the expansion of
#{mappingInputPattern}_???.ttl

if [ $# -eq 0 ]; then
    help
fi

project=""
mappingInputPattern=""
mappingRemoveFile="mappingsToRemove.ru"

while getopts ":hi:s:" opt; do
    case $opt in
        h)
            cat help.txt >&2
            cleanup
            exit
            ;;
        i)
            mappingInputPattern="$OPTARG"
            ;;
        s)
            mappingRemoveFile="$OPTARG"
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            exit 1
            ;;
        :)
            echo "Option -$OPTARG requires an argument." >&2
            exit 1
            ;;
    esac
done

if [ "$project" == "" ]; then
    help
fi

triplestoreURL=""
if [ "$project" == "loom" ]; then
    triplestoreURL=$loomTriplestoreURL
    graphURL=$loomGraph
    graphEncodedURL=$loomGraphEncoded
fi
if [ "$project" == "umlsCui" ]; then
    triplestoreURL=$umlsCuiTriplestoreURL
    graphURL=$umlsCuiGraph
    graphEncodedURL=$umlsCuiGraphEncoded
fi
if [ "triplestoreURL" == "" ]; then
    echo "$(date): $0, ERROR: Unknown project: $project" >&2
    exit 1
fi

foundInputs=0
for f in ${mappingInputPattern}_???.ttl; do
    foundInputs=1
done
if [ ! $foundInputs ]; then
    echo "$(date): $0, ERROR: There are no mapping files for: $mappingInputPattern" >&2
    exit 1;
fi

# Ensure we start with a clean slate.
echoSeparator
./4storeDeleteGraph.sh -r $triplestoreURL
exitStatusGT0 $?

# Upload the triples to the server.
echoSeparator
for mappingInputFile in ${mappingInputPattern}_???.ttl; do
    #mappingOutputFile=$(echo $mappingInputFile | sed -e "s/\.ttl$/_OK\.nt/")
    echo >&2
    ./4storeAppendGraph.sh -g $graphEncodedURL -i $mappingInputFile
    exitStatusGT0 $?
done

# Clean the bad mappings from loom.
echoSeparator
./4storeCleanup.sh -g $graphURL -s $mappingRemoveFile
exitStatusGT0 $?

## Dump all the 'good' triples in the graph.
#./4storeDumpLoomGraph.sh -o $mappingOutputFile
#exitStatusGT0 $?

cleanup

