#!/bin/bash

hostname | grep -q 'ncbostage'
if [ $? -ne 0 ]; then
    # TODO: Can we run this update some other way?
    echo "$(date): $0, ERROR: Can only update virtuoso when running on stage." >&2
    exit 1
fi

# Virtuoso is limited to read-only access on specific paths.
virtuosoAccessPath="/srv/ncbo/share/loom"

# ---------------------------------------------------------------------------------
# Process input arguments
#

cat <<END > help.txt

Usage: $0 [options]

-h : help

-i <mappingFilesPattern> : The <mappingFilesPattern> is a file glob pattern to
a series of files generated by the loom mapping process, which contain LOOM
mapping triples in 'ntriples' format.  This input argument is required.  For
example, this glob pattern "{tmpDataPath}/loom_terms_*_???_OK.nt" matches files
like:
{tmpDataPath}/loom_terms_2219879239933848169_mappings_001_OK.nt
{tmpDataPath}/loom_terms_2219879239933848169_mappings_002_OK.nt
{tmpDataPath}/loom_terms_2219879239933848169_mappings_003_OK.nt
{tmpDataPath}/loom_terms_2219879239933848169_mappings_004_OK.nt
{tmpDataPath}/loom_terms_2219879239933848169_mappings_005_OK.nt

-s : skip deleting the loom data prior to uploading new data.

END

if [ $# -eq 0 ]; then
    cat help.txt >&2
    rm -f help.txt
    exit 1
fi

skipDelete=0
while getopts ":hi:s" opt; do
    case $opt in
        h)
            cat help.txt >&2
            rm -f help.txt
            exit
            ;;
        i)
            mappingFilesPattern="$OPTARG"
            ;;
        s)
            skipDelete=1
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            exit 1
            ;;
        :)
            echo "Option -$OPTARG requires an argument." >&2
            exit 1
            ;;
    esac
done

if [ $skipDelete -eq 0 ]; then
    ./virtuoso_deleteLoom.bash -r
    if [ $? -ne 0 ]; then
        exit 1
    fi
fi

for f in $mappingFilesPattern; do
    nf="$virtuosoAccessPath/$(basename $f)"
    [ $f != $nf ] && cp -au $f $nf
    ./virtuoso_importLoom.bash -i $nf
    if [ $? -ne 0 ]; then
        [ $f != $nf ] && rm -f $nf
        exit 1
    fi
    [ $f != $nf ] && rm -f $nf
done

