#!/bin/bash



echo "SCRIPT REVISIONS REQUIRED, QUITING NOW."
exit 1



mappingInputFile=""
mappingRemoveFile=""
mappingOutputFile=""
mappingsToDelete="mappingsToDelete.ru"

loomGraph='http://protege.stanford.edu/ontologies/mappings/loom'
loomGraphEncoded=$(php -r "echo rawurlencode('$loomGraph');")
loomBadGraph='http://protege.stanford.edu/ontologies/mappings/loomBad'
loomBadGraphEncoded=$(php -r "echo rawurlencode('$loomBadGraph');")

# Use NCBO Stage virtuoso server:
triplestoreURL="http://localhost:8890"
triplestoreUpdateURL="${triplestoreURL}/update"
triplestoreSparqlURL="${triplestoreURL}/sparql"
triplestoreDataURL="${triplestoreURL}/data"
triplestoreLoomURL="${triplestoreDataURL}/${loomGraph}"
triplestoreLoomBadURL="${triplestoreDataURL}/${loomBadGraph}"

acceptHeader='Accept:text/plain'
tmpFile="tmp.txt"
if [ -f $tmpFile ]; then
    rm $tmpFile
    touch $tmpFile
fi

countMappingIDs () {
    echo >&2
    curl -s \
        -H $acceptHeader \
        --data-urlencode query@sparql_countLoomMappingIDobjects.rq \
        $triplestoreSparqlURL >&2
    curl -s \
        -H $acceptHeader \
        --data-urlencode query@sparql_countLoomMappingIDsubjects.rq \
        $triplestoreSparqlURL >&2
    curl -s \
        -H $acceptHeader \
        --data-urlencode query@sparql_countLoomBadMappingIDs.rq \
        $triplestoreSparqlURL >&2
    echo >&2
}

cleanup () {
    rm -f tmp.txt
    rm -f help.txt
    rm -f $mappingsToDelete
}



# ---------------------------------------------------------------------------------
# Process input arguments
#

cat <<END > help.txt

Usage: $0 -i <mappingInputFile.ttl> -s [mappingsRemoveSPARQL.ru] -o [mappingOutputFile.ttl]

The <mappingInputFile.ttl> is generated by java processes.  This input argument
is required.

Unless the [mappingsRemoveSPARQL.ru] file is specified explicitly, the
mappingsToRemove.ru file is used. That file is generated automatically from
mappingsToRemoveAsSPARQL.pl, which parses mappingsToRemove.sql to generate
SPARQL that will populate a new graph with mapping IDs to be removed. The new
graph is temporarily created at: $loomBadGraph

That graph contains triples of the form: ?mapID a
<http://protege.stanford.edu/ontologies/mappings/mappings.rdfs#One_To_One_Mapping>
The ?mapID is used in a DESCRIBE query on the loom graph to identify all the
loom triples that contain the ?mapID.  This is done by the SPARQL in
sparql_loomMappingsToRemove1.rq and sparql_loomMappingsToRemove2.rq; then all of
those triples are then deleted from the loom graph.

The final result is output to [mappingOutputFile.ttl].  When that argument is not
explicit, the results are placed in <mappingInputFile>_OK.ttl.

END

while getopts ":hi:o:s:" opt; do
    case $opt in
        h)
            cat help.txt >&2
            cleanup
            exit
            ;;
        i)
            mappingInputFile="$OPTARG"
            ;;
        o)
            mappingOutputFile="$OPTARG"
            ;;
        s)
            mappingRemoveFile="$OPTARG"
            echo $mappingRemoveFile
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            exit 1
            ;;
        :)
            echo "Option -$OPTARG requires an argument." >&2
            exit 1
            ;;
    esac
done

if [ ! -f "$mappingInputFile" ]; then
    echo "$(date): ERROR: There is no mapping turtle file: $mappingInputFile" >&2
    exit 1;
fi
if [ "$mappingOutputFile" == "" ]; then
    mappingOutputFile=$(echo $mappingInputFile | sed -e "s/\.ttl/_OK\.ttl/")
fi
if [ "$mappingRemoveFile" == "" ]; then
    # No file specified on command line, use a default and verify that
    # it's up-to-date or recreate it.
    mappingRemoveFile="mappingsToRemove.ru"
    perlScript="mappingsToRemoveAsSPARQL.pl"
    perlScriptRun=0
    if [ -f "$mappingRemoveFile" ]; then
        # Run the perl script when the .ru file is older than it.
        if [ "$mappingRemoveFile" -ot "$perlScript" ]; then
            perlScriptRun=1
        fi
    else
        perlScriptRun=1
    fi
    if [ $perlScriptRun -eq 1 ]; then
        if [ ! -f "$perlScript" ]; then
            echo "$(date): ERROR: There is a missing perl script: $perlScript" >&2
            exit 1
        fi
        ./$perlScript > $mappingRemoveFile
        if [ $? -gt 0 ]; then
            echo "$(date): ERROR: Failed to run perl script." >&2
            echo "$(date): ERROR: Failed to create mapping remove SPARQL file: $mappingRemoveFile" >&2
            exit 1
        fi
    fi
fi
if [ ! -f $mappingRemoveFile ]; then
    echo "$(date): ERROR: There is no mapping remove SPARQL file: $mappingRemoveFile" >&2
    exit 1;
fi

echo
echo "input:    $mappingInputFile"
echo "ouput:    $mappingOutputFile"
echo "sparql:   $mappingRemoveFile"
echo



# Update the virtuoso triplestore, if we're on stage.
# The documentation for virtuoso isql is at
# http://docs.openlinksw.com/virtuoso/isql.html
hostname | grep -q 'localhost'
if [ $? -eq 0 ]; then
    host='localhost'
    port='8890'
    user='dba'
    pass='dba'
    isql='/usr/local/virtuoso-opensource/bin/isql'
    if [ -f "$isql" ]; then
        # Remove the old loom graph.
        echo "$(date): Starting isql process to delete loom graph." >&2
        $isql 1111 $user $pass < virtuoso_deleteLoom.sql 
        if [ $? -eq 0 ]; then
            echo "$(date): Completed isql process to delete loom graph." >&2
        else
            echo "$(date): ERROR: Failed to delete loom graph." >&2
        fi
        # Upload the new loom graph.
        echo "$(date): Starting isql process to upload loom triples." >&2
        cat virtuoso_importLoom.sql | sed -e "s#MAPPING_FILE_REGEX#${mappingInputFile}#" > tmp.sql
        $isql 1111 $user $pass < tmp.sql
        if [ $? -eq 0 ]; then
            echo "$(date): Completed isql process to upload loom triples." >&2
        else
            echo "$(date): ERROR: Failed to upload loom triples." >&2
            echo "$(date): Import SQL file contained:" >&2
            cat tmp.sql
        fi
        rm tmp.sql
        # TODO: Remove bad mappings.
        #./runLoomUpdateVirtuoso.bash -i $mappingInputFile
    else
        # TODO: Can we run this update some other way?
        echo "$(date): ERROR: isql is not available on stage." >&2
    fi
else
    # TODO: Can we run this update some other way?
    echo "$(date): ERROR: Can only update virtuoso when running on stage." >&2
fi


# EXIT NOW, THE HTTP PROTOCOLS BELOW ARE NOT TESTED YET!
exit






# ---------------------------------------------------------------------------------
# Ensure we start with a clean slate.
echo >&2
echo "$(date): Starting removal of old loom graph." >&2
curl -s -i -X DELETE $triplestoreLoomURL | grep -q "success"
if [ $? -eq 0 ]; then
    echo "$(date): Completed delete of old loom graph." >&2
else
    echo "$(date): Failed to delete old loom graph." >&2
    cleanup
    exit 1
fi


exit




# ---------------------------------------------------------------------------------
# Populate the 'loom' graph with the input data.
echo >&2
echo "$(date): Starting upload of new loom graph." >&2
curl -s -T $mappingInputFile \
    -H "Content-Type:application/x-turtle" \
    $triplestoreLoomURL | grep -q "success"
if [ $? -eq 0 ]; then
    echo "$(date): Completed upload of new loom graph." >&2
else
    echo "$(date): Failed to upload new loom graph." >&2
    cleanup
    exit 1
fi
countMappingIDs


# ---------------------------------------------------------------------------------
# Remove bad mappings, using SPARQL on the 4store KB.  This process requires
# several stages that might be compressed into one stage when 4store has
# implemented full support for the update syntax of SPARQL 1.1; at the moment,
# it cannot support update queries of the form 'DELETE WHERE {}'.  When it can,
# the perl script used to generate mappingsToRemove.ru should be modified so
# this process becomes a one-step update request.
echo >&2
echo "$(date): Starting SPARQL removal of bad loom mappings." >&2




# Clear the bad mapping graph.
curl -s -i -X DELETE $triplestoreLoomBadURL | grep -q "success"
if [ $? -eq 0 ]; then
    echo "$(date): Completed delete of loomBad graph." >&2
else
    echo "$(date): Failed to delete loomBad graph." >&2
    cleanup
    exit 1
fi

# Run an update query that will populate a new graph with all the mapping
# IDs that are to be removed.
curl -s -i \
    -o $tmpFile \
    --data-urlencode update@$mappingRemoveFile \
    $triplestoreUpdateURL
grep -q 'error' $tmpFile
if [ $? -eq 0 ]; then
    echo "$(date): Failed to populate loomBad graph." >&2
    cleanup
    exit 1
fi
grep -q '200.*OK' $tmpFile
if [ $? -eq 0 ]; then
    echo "$(date): Completed population of new loomBad graph." >&2
else
    echo "$(date): Failed to populate loomBad graph." >&2
    cleanup
    exit 1
fi
countMappingIDs


# Check the loomBad graph for any content.
# This query returns a count of all the triples in the loomBad graph that match:
# ?mapID a mapRDFS:One_To_One_Mapping .
curl -s \
    -o $tmpFile \
    -H $acceptHeader \
    --data-urlencode query@sparql_countLoomBadMappingIDs.rq \
    $triplestoreSparqlURL 
# Are there are any mappings to be removed?
if [ -s $tmpFile ]; then
    anythingToRemove=$(grep -v '^\?.*' $tmpFile | grep -v "^ *$")
    if [ $anythingToRemove -eq 0 ]; then
        echo "$(date): There are no bad loom mappings to remove." >&2
        cleanup
        exit
    fi
else
    echo "$(date): There are no bad loom mappings to remove." >&2
    cleanup
    exit
fi

# Continue with removing bad mappings.  

# Use the graph of bad mapping IDs to extract all the triples to be removed from
# the loom graph.  Use a few SPARQL queries to build an update query to remove
# all the bad mappings from loom.  The update query is built in
# $mappingsToDelete.

if [ -f $mappingsToDelete ]; then
    rm $mappingsToDelete
    touch $mappingsToDelete
fi
cat <<END > $mappingsToDelete
DELETE DATA
{
    GRAPH <$loomGraph>
    {
END

# This query returns all the triples with ?mapId as an object in the loom
# graph, which should be only triples with this pattern:
# ?s = <http://protege.stanford.edu/ontologies/mappings/mappings.rdfs#One_To_One_Mapping> 
# ?p = <http://protege.stanford.edu/ontologies/mappings/mappings.rdfs#id>
curl -s \
    -o $tmpFile \
    -H $acceptHeader \
    --data-urlencode query@sparql_loomMappingsToRemove1.rq \
    $triplestoreSparqlURL
# Clean up the output of the query
sed -e 's/^\(.*\)$/\1 \./' $tmpFile | grep -v '^\?.*$' >> $mappingsToDelete

# This query returns a description of all the triples 
# with ?mapId as a subject in the loom graph.
curl -s \
    -o $tmpFile \
    -H $acceptHeader \
    --data-urlencode query@sparql_loomMappingsToRemove2.rq  \
    $triplestoreSparqlURL
# Remove the @base, @prefix and empty lines from the $tmpFile file.
grep -v "^@.*$" $tmpFile | grep -v '^\?.*$' >> $mappingsToDelete

# Complete matching braces
cat <<END >> $mappingsToDelete
    }
}
END

# Run an update query to remove all these triples from the loom graph.
curl -s -i \
    -o $tmpFile \
    --data-urlencode update@$mappingsToDelete \
    $triplestoreUpdateURL
grep -q 'error' $tmpFile
if [ $? -eq 0 ]; then
    echo "$(date): Failed to remove bad loom mappings." >&2
    cleanup
    exit 1
fi
grep -q '200.*OK' $tmpFile
if [ $? -eq 0 ]; then
    echo "$(date): Completed SPARQL removal of bad loom mappings." >&2
else
    echo "$(date): Failed to remove bad loom mappings." >&2
    cleanup
    exit 1
fi
countMappingIDs

# Clear the bad mapping graph.
curl -s -i -X DELETE $triplestoreLoomBadURL | grep -q "success"
if [ $? -eq 0 ]; then
    echo "$(date): Completed delete of loomBad graph." >&2
else
    echo "$(date): Failed to delete loomBad graph." >&2
    cleanup
    exit 1
fi

# ---------------------------------------------------------------------------------
# This query returns all the 'good' triples in the loom graph.
echo >&2
echo "$(date): Starting SPARQL dump for all good loom mappings." >&2
curl -s \
    -o $mappingOutputFile \
    -H $acceptHeader \
    --data-urlencode query@sparql_loomMappingsOK.rq  \
    $triplestoreSparqlURL
if [ $? -eq 0 ]; then
    echo "$(date): Completed SPARQL dump for all good loom mappings: $mappingOutputFile" >&2
else
    echo "$(date): Failed SPARQL dump for all good loom mappings" >&2
    cleanup
    exit 1
fi

cleanup
